DROP TRIGGER IF EXISTS trg_users_ins_upd ON users;
DROP TABLE IF EXISTS USERS_PWD_HISTORY;
DROP TABLE IF EXISTS USER_RIGHTS_ATTR;
DROP TABLE IF EXISTS GROUP_RIGHTS_ATTR;
DROP TABLE IF EXISTS ATTRIBUTES;
DROP TABLE IF EXISTS USER_GROUPS;
DROP TABLE IF EXISTS USER_RIGHTS;
DROP TABLE IF EXISTS GROUP_RIGHTS;
DROP TABLE IF EXISTS RIGHTS;
DROP TABLE IF EXISTS GROUPS;
DROP TABLE IF EXISTS USER_PHONES;
DROP TABLE IF EXISTS PHONE_TYPE;
DROP TABLE IF EXISTS USERS;
DROP TABLE IF EXISTS JOBS;

CREATE TABLE IF NOT EXISTS JOBS (
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR ( 500 )
);

CREATE TABLE IF NOT EXISTS USERS (
	ID SERIAL PRIMARY KEY,
  UUID VARCHAR(255) UNIQUE,
	FIRSTNAME VARCHAR ( 50 ),
  LASTNAME VARCHAR ( 50 ),
  USERNAME VARCHAR ( 50 ),
  PASSWORD VARCHAR ( 50 ),
  PASSWORD_DATELIMIT TIMESTAMP,
  BIRTHDATE TIMESTAMP WITH TIME ZONE,
  EMAIL VARCHAR ( 255 ),
  IMG_URL VARCHAR ( 255 ),
  SSH_KEY BYTEA,
  ID_JOB INTEGER,
  CREATION_DATE DATE DEFAULT NOW(),
  UPDATE_DATE TIMESTAMP,
  EXPIRATION_DATE TIMESTAMP,
  CONSTRAINT FK_USERS_JOB
    FOREIGN KEY(ID_JOB) 
    REFERENCES JOBS(ID)
    ON DELETE SET NULL --when deleting a job in the JOBS table, all the row referenced by this job in the USERS table are set to null
);

CREATE TABLE IF NOT EXISTS PHONE_TYPE (
  ID SERIAL PRIMARY KEY,
  NAME VARCHAR ( 500 )
);

CREATE TABLE IF NOT EXISTS USER_PHONES (
  ID_USER INTEGER,
  ID_PHONETYPE INTEGER,
  VALUE VARCHAR (500),
  CONSTRAINT FK_PHONES_USER
    FOREIGN KEY(ID_USER) 
    REFERENCES USERS(ID)
    ON DELETE CASCADE, --when deleting a user in the USERS table, all the row referenced by this group in the USER_PHONES table are deleted
  CONSTRAINT FK_ID_PHONES_TYPE
    FOREIGN KEY(ID_PHONETYPE) 
    REFERENCES PHONE_TYPE(ID)
    ON DELETE CASCADE --when deleting a phonetype in the PHONE_TYPE table, all the row referenced by this phonetype in the USER_PHONES table are deleted
);


CREATE TABLE IF NOT EXISTS USERS_PWD_HISTORY (
  ID SERIAL PRIMARY KEY,
  UPDATE_DATE TIMESTAMP,
  ID_USER INTEGER,
  PASSWORD VARCHAR ( 50 ),
  CONSTRAINT FK_ID_USER_PWD_HISTORY
    FOREIGN KEY(ID_USER) 
    REFERENCES USERS(ID)
    ON DELETE CASCADE --when deleting a user in the USERS table, all the row referenced by this group in the USERS_PWD_HISTORY table are deleted
);

CREATE TABLE IF NOT EXISTS RIGHTS (
	ID SERIAL PRIMARY KEY,
	NAME VARCHAR ( 500 ),
  DESCRIPTION VARCHAR
);

CREATE TABLE IF NOT EXISTS ATTRIBUTES (
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR ( 500 )
);

CREATE TABLE IF NOT EXISTS GROUPS (
	ID SERIAL PRIMARY KEY,
	NAME VARCHAR ( 500 ),
    DESCRIPTION VARCHAR,
    IMG_URL VARCHAR ( 255 ),
    ID_PARENTGROUP INTEGER,
    CONSTRAINT FK_ID_PARENTGROUP
        FOREIGN KEY(ID_PARENTGROUP)
        REFERENCES GROUPS(ID)
        ON DELETE CASCADE --when deleting a parent_group in the GROUPS table, all the row referenced by this group in the GROUPS table are deleted
);

CREATE TABLE IF NOT EXISTS USER_RIGHTS (
    ID SERIAL PRIMARY KEY,
    ID_USER INTEGER,
    ID_RIGHT INTEGER,
    ID_IMPACTED_GROUP INTEGER,
    ID_IMPACTED_USER INTEGER,
    CONSTRAINT FK_IMPACTED_USER
    FOREIGN KEY(ID_IMPACTED_GROUP)
    REFERENCES GROUPS(ID)
    ON DELETE CASCADE, --when deleting a group in the GROUPS table, all the row referenced by this group in the USER_RIGHTS table are deleted
    CONSTRAINT FK_IMPACTED_GROUP
    FOREIGN KEY(ID_IMPACTED_USER)
    REFERENCES USERS(ID)
    ON DELETE CASCADE, --when deleting a user in the USERS table, all the row referenced by this user in the USER_RIGHTS table are deleted
  CONSTRAINT FK_RIGHTS_USER
    FOREIGN KEY(ID_USER) 
    REFERENCES USERS(ID)
    ON DELETE CASCADE, --when deleting a user in the USERS table, all the row referenced by this user in the USER_RIGHTS table are deleted
  CONSTRAINT FK_USERS_RIGHT
    FOREIGN KEY(ID_RIGHT) 
    REFERENCES RIGHTS(ID)
    ON DELETE CASCADE --when deleting a right in the RIGHTS table, all the row referenced by this right in the USER_RIGHTS table are deleted
);

--define set of one or multiple rights for one or multiple groups.
CREATE TABLE IF NOT EXISTS GROUP_RIGHTS (
  ID SERIAL PRIMARY KEY,
  ID_GROUP INTEGER,
  ID_RIGHT INTEGER,
  ID_IMPACTED_GROUP INTEGER,
    ID_IMPACTED_USER INTEGER,
    CONSTRAINT FK_IMPACTED_USER
    FOREIGN KEY(ID_IMPACTED_GROUP)
    REFERENCES GROUPS(ID)
    ON DELETE CASCADE, --when deleting a group in the GROUPS table, all the row referenced by this group in the GROUP_RIGHTS table are deleted
    CONSTRAINT FK_IMPACTED_GROUP
    FOREIGN KEY(ID_IMPACTED_USER)
    REFERENCES USERS(ID)
    ON DELETE CASCADE, --when deleting a user in the USERS table, all the row referenced by this user in the GROUP_RIGHTS table are deleted
    CONSTRAINT FK_RIGHTS_GROUP
    FOREIGN KEY(ID_GROUP) 
    REFERENCES GROUPS(ID)
    ON DELETE CASCADE, --when deleting a group in the GROUPS table, all the row referenced by this group in the GROUP_RIGHTS table are deleted
  CONSTRAINT FK_GROUPS_RIGHT
    FOREIGN KEY(ID_RIGHT) 
    REFERENCES RIGHTS(ID)
    ON DELETE CASCADE --when deleting a right in the RIGHTS table, all the row referenced by this right in the GROUP_RIGHTS table are deleted
);

CREATE TABLE IF NOT EXISTS USER_RIGHTS_ATTR (
    ID_USER_RIGHTS INTEGER,
    ID_ATTRIBUTES INTEGER,
    PRIMARY KEY(ID_USER_RIGHTS,ID_ATTRIBUTES),
    CONSTRAINT FK_ID_USER_RIGHTS_ATTR
        FOREIGN KEY(ID_USER_RIGHTS)
        REFERENCES USER_RIGHTS(ID)
        ON DELETE CASCADE,
    CONSTRAINT FK_ID_ATTRIBUTES_USER
        FOREIGN KEY(ID_ATTRIBUTES)
        REFERENCES ATTRIBUTES(ID)
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS GROUP_RIGHTS_ATTR (
    ID_GROUP_RIGHTS INTEGER,
    ID_ATTRIBUTES INTEGER,
    PRIMARY KEY(ID_GROUP_RIGHTS,ID_ATTRIBUTES),
    CONSTRAINT FK_ID_GROUP_RIGHTS_ATTR
        FOREIGN KEY(ID_GROUP_RIGHTS)
        REFERENCES GROUP_RIGHTS(ID)
        ON DELETE CASCADE,
    CONSTRAINT FK_ID_ATTRIBUTES_USER
        FOREIGN KEY(ID_ATTRIBUTES)
        REFERENCES ATTRIBUTES(ID)
        ON DELETE CASCADE
);

--define set of one or multiple groups for one or multple users.
CREATE TABLE IF NOT EXISTS USER_GROUPS (
	ID_USER INTEGER,
  ID_GROUP INTEGER,
  PRIMARY KEY (ID_USER, ID_GROUP),
  CONSTRAINT FK_GROUPS_USER
    FOREIGN KEY(ID_USER) 
    REFERENCES USERS(ID)
    ON DELETE CASCADE, --when deleting a user in the USERS table, all the row referenced by this group in the GROUP_RIGHTS table are deleted
  CONSTRAINT FK_USERS_GROUP
    FOREIGN KEY(ID_GROUP) 
    REFERENCES GROUPS(ID)
    ON DELETE CASCADE --when deleting a group in the RIGHTS table, all the row referenced by this group in the GROUP_RIGHTS table are deleted
);

CREATE OR REPLACE FUNCTION users_management() RETURNS trigger AS $trg_users_ins_upd$
  DECLARE
    V_MODIF BOOLEAN := FALSE;
    V_PASSWORD USERS.PASSWORD%TYPE;
    V_EXIST_USERNAME BOOLEAN := FALSE;
  BEGIN
    -- Force lowercase email
    NEW.EMAIL := LOWER(NEW.EMAIL);
    NEW.USERNAME := LOWER(NEW.USERNAME);
    IF NEW.USERNAME IS NOT NULL THEN
      SELECT TRUE
      INTO V_EXIST_USERNAME
      FROM USERS 
      WHERE LOWER(USERNAME) = NEW.USERNAME;
      IF V_EXIST_USERNAME THEN
        RAISE EXCEPTION 'cannot have two users with same username';
      END IF;
    END IF;
    
    IF TG_OP = 'UPDATE' THEN
      IF COALESCE (NEW.PASSWORD, '???') != COALESCE (OLD.PASSWORD, '???') THEN
          V_PASSWORD := COALESCE (OLD.PASSWORD, '???');
          V_MODIF := TRUE;
      END IF;
    END IF;
    IF V_MODIF THEN
      NEW.UPDATE_DATE := CURRENT_TIMESTAMP;
      INSERT INTO USERS_PWD_HISTORY(UPDATE_DATE,ID_USER,PASSWORD)
      VALUES(CURRENT_TIMESTAMP,NEW.ID,V_PASSWORD);
    END IF;
    RETURN NEW;
  END;
$trg_users_ins_upd$ LANGUAGE plpgsql;

CREATE TRIGGER trg_users_ins_upd BEFORE INSERT OR UPDATE ON USERS
  FOR EACH ROW EXECUTE PROCEDURE users_management();